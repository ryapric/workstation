#!/usr/bin/env zsh

### ZSH stuff
export ZSH="${HOME}/.oh-my-zsh"
ZSH_THEME="gnzh"
plugins=(
  docker
  docker-compose
  git
  python
  ubuntu
)

source "${ZSH}/oh-my-zsh.sh"

### PATH
for p in \
  "${HOME}/.local/bin" \
  "${HOME}/.local/go/bin" \
  "${HOME}/go/bin" \
  "${HOME}/.cargo/bin" \
  "/usr/games" \
  "/usr/local/games" \
; do
  if [[ ! "${PATH}" =~ ${p} ]]; then
    export PATH="${p}:${PATH}"
  fi
done

### Aliases
# if grep -q 'sid' /etc/*-release; then
#   printf 'Debian Sid detected; assuming you are using Podman, and will alias "docker" to that\n'
#   alias docker='sudo podman '
#   alias docker-compose='sudo podman-compose '
# fi

alias aws-azure-login="npx aws-azure-login --no-prompt "
alias cfn='aws cloudformation '
alias dsp='docker system prune'
alias dspv='docker system prune --volumes'
alias k='kubectl '
alias tclsh='rlwrap tclsh '
alias tf='terraform '
alias va='source venv/bin/activate'
alias vc='python3 -m venv --clear venv'

### Vars
export AWS_DEFAULT_REGION='us-east-2'
export AWS_PROFILE=default
[[ -f "${HOME}/.aws_var_overrides" ]] && source "${HOME}/.aws_var_overrides"

export DOCKER_BUILDKIT=1

export OSC_INFRA_ROOT="${HOME}/repos/opensourcecorp/osc-infra"
# export VAGRANT_EXPERIMENTAL="disks"
export VAGRANT_DEFAULT_PROVIDER=libvirt

### Completions
if command -v kubectl > /dev/null; then
  source <(kubectl completion zsh)
fi

### Functions
get-apt-key() {
  [[ -z "${1}" ]] && { printf 'Must specify GPG key URL as first argument\n' && return 1; }
  [[ -z "${2}" ]] && { printf 'Must specify GPG key file name as second argument\n' && return 1; }
  local url="${1}"
  local keyfile="${2}"
  curl -fsSL "${url}" > /tmp/"${keyfile}"
  if file /tmp/"${keyfile}" | grep '(old)'; then
    printf 'ASCII GPG format found; dearmoring first\n'
    sudo sh -c "cat /tmp/${keyfile} | gpg --dearmor > /etc/apt/trusted.gpg.d/${keyfile}"
  else
    printf 'GPG binary format found, adding key directly\n'
    sudo cp /tmp/"${keyfile}" /etc/apt/trusted.gpg.d/"${keyfile}"
  fi
  printf 'Stored GPG key material in /etc/apt/trusted.gpg.d/%s\n' "${keyfile}"
}

# Handy SQLite func for operating directly on CSVs
csvql() {
  sqlite3 \
    ':memory:' \
    -cmd '.mode csv' \
    -cmd ".import $1 data" \
    -cmd '.mode column' \
    "${2}"
}

### THE FOLLOWING NEED TO RUN LAST
# Check if running under WSL, and NOT WSL Debian
if uname -a | grep -q -i -E 'microsoft|wsl' ; then # && ! grep -q 'sid' /etc/*-release ; then
  if [[ -f /usr/lib/binfmt.d/WSLInterop.conf ]]; then
    printf 'WARNING: the file at /usr/lib/binfmt.d/WSLInterop.conf is there until MS fixes systemd-enabled WSL2 interop -- delete later when no longer needed\n'
    printf 'Additional details here: https://github.com/microsoft/WSL/issues/8843#issuecomment-1255546484\n'
  fi
  sudo usermod -aG kvm,libvirt "${USER}" || true
  sudo bash -c '[[ -f /etc/resolv.conf ]] || sudo printf "nameserver 8.8.8.8\nnameserver 1.1.1.1\n" > /etc/resolv.conf'
  export VAGRANT_DEFAULT_PROVIDER='libvirt'
fi

# This needs to run DEAD LAST, since it's an exec call
{ [[ -z "${TMUX}" ]] && exec tmux ;} || true
